/*
Given a string of numbers and operators, 
return all possible results from computing all the different possible ways to group numbers and operators. 
The valid operators are +, - and *.

Example 1:
	Input: 2-1-1
	Output: [0, 2]
	Explanation: 
	((2-1)-1) = 0 
	(2-(1-1)) = 2

Example 2:
	Input: 2*3-4*5
	Output: [-34, -14, -10, -10, 10]
	Explanation: 
	(2*(3-(4*5))) = -34 
	((2*3)-(4*5)) = -14 
	((2*(3-4))*5) = -10 
	(2*((3-4)*5)) = -10 
	(((2*3)-4)*5) = 10

------TestCases-------
case =1
input =2-3*4+5*6*7
output ='[-640, -640, -1132, -712, -1132, -220, -220, -1132, -712, -712, -1132, -292, -1132, -712, -214, -214, -378, -238, -378, 200, 200, 206, 206, -1050, -630, -378, -210, 42, -700, -1120, -280, -1120, -700, -238, -378, 140, 182, -1050, -630, -378, -210, 42]'

case =2
input =2-13-1-4+5+6+7
output ='[-32, -32, -32, -32, -32, 4, 4, -6, 4, -18, -18, 4, -6, 4, 12, 12, 12, 12, 12, -32, -32, -24, -24, -32, -22, -14, -32, -24, -32, -32, -10, -20, -10, -2, -2, -32, -24, -32, -22, -14, -32, -24, 10, 10, 10, 10, 10, -26, -26, -16, -26, -4, -4, -26, -16, -26, -32, -32, -32, -32, -32, -34, -34, -34, -34, -34, 4, 4, 12, 12, 10, 10, 4, 4, 2, 2, -6, 4, 12, -6, 2, 10, 0, -6, -8, 4, 12, 10, 4, 2, -18, -18, 4, -6, 4, 12, 12, -18, -10, -18, -8, 0, -18, -10, 10, 10, -12, -2, -12, -18, -18, -20, -20, 4, 12, 10, 4, 2, -6, 4, 12, -6, 2, 10, 0, -6, -8, 4, 12, 10, 4, 2]'

case =3
input =1-2*3-4*5+7
output ='[91, 49, 25, 21, -3, 43, 22, 25, -23, 28, 4, 8, 4, -16, 45, 24, 12, 10, -2, -53, -32, -51, -30, 36, -12, 12, -108, -84, 42, 18, 22, 18, -2, 24, 12, -18, -16, 22, 2, 12, -38, -28]'

case =4
input =1*2*3
output ='[6, 6]'

case =5
input =1-2+3*4
output ='[-13, -19, 11, -16, 8]'

case =6
input =1*2*3-4-5-6+7+8
output ='[-34, -34, 26, -2, 26, 50, 50, -34, -10, -34, -6, 18, -34, -10, 30, 30, -30, -2, -30, -34, -34, -54, -54, 26, 50, 30, 26, 6, -2, 26, 50, -2, 22, 30, 2, -2, -22, 26, 50, 30, 26, 6, -14, -14, 16, 2, 16, 28, 28, -14, -2, -14, 0, 12, -14, -2, 14, 14, -16, -2, -16, 18, 18, -12, 2, -12, -13, -13, -33, -33, -14, -14, -28, -28, -24, -24, 11, 35, 15, 11, -9, 16, 28, 14, 18, 17, -3, 16, 2, 6, -10, 18, 42, -10, 14, 22, -6, -10, -30, 18, 42, 22, 18, -2, 2, 16, 28, 2, 14, 14, 0, 18, 4, 3, -17, 2, -12, -8, 11, 35, 15, 11, -9, 16, 28, 14, 18, 17, -3, 16, 2, 6, -34, -34, 26, -2, 26, 50, 50, -34, -10, -34, -6, 18,-34, -10, 30, 30, -30, -2, -30, -34, -34, -54, -54, 26, 50, 30, 26, 6, -2, 26, 50, -2, 22, 30, 2, -2, -22, 26, 50, 30, 26, 6, -14, -14, 16, 2, 16, 28, 28, -14, -2, -14, 0, 12, -14, -2, -14, -14, 16, 2, 16, 28, 28, -14, -2, -14, 0, 12, -14, -2, 14, 14, -16, -2, -16, 18, 18, -12, 2, -12, 14, 14, -16, -2, -16, 18, 18, -12, 2, -12, 18, 18, -12, 2, -12, -13, -13, -33, -33, -14, -14, -28, -28, -24, -24, -13, -13, -33, -33, -14, -14, -14, -14, -28, -28, -24, -24, -28, -28, -24, -24, -24, -24, 11, 35, 15, 11, -9, 16, 28, 14, 18, 17, -3, 16, 2, 6, 11, 35, 15, 11, -9, 16, 28, 16, 28, 14, 18, 14, 18, 18, 17,-3, 16, 2, 6, 17, -3, 16, 16, 2, 6, 2, 6, 6, -10, 18, 42, -10, 14, 22, -6, -10, -30, 18, 42, 22, 18, -2, 2, 16, 28, 2, 14, 14, 0, 18, 4, 3, -17, 2, -12, -8, 11, 35, 15, 11, -9, 16, 28, 14, 18, 17, -3, 16, 2, 6, -10, 18, 42, -10, 14, 22, -6, -10, -30, 18, 42, 22, 18, -2, 2, 16, 28, 2, 14, 2, 16, 28, 2, 14, 14, 0, 18, 4, 14, 0, 18, 4, 18, 4, 3, -17, 2, -12, -8, 3, -17, 2, 2, -12, -8, -12, -8, -8, 11, 35, 15, 11, -9, 16, 28, 14, 18, 17, -3, 16, 2, 6, 11, 35, 15, 11, -9, 16, 28, 16,28, 14, 18, 14, 18, 18, 17, -3, 16, 2, 6, 17, -3, 16, 16, 2, 6, 2, 6, 6]'

*/
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

 class AddParentheses{
	 public static List<Integer> diffWaysToCompute(String input) {
        List<Integer> res = new ArrayList<Integer>();
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == '-' || c == '+' || c == '*') {
                String a = input.substring(0, i);
                String b = input.substring(i + 1);
                List<Integer> al = diffWaysToCompute(a);
                List<Integer> bl = diffWaysToCompute(b);
                for (int x : al) {
                    for (int y : bl) {
                        if (c == '-') {
                            res.add(x - y);
                        } else if (c == '+') {
                            res.add(x + y);
                        } else if (c == '*') {
                            res.add(x * y);
                        }
                    }
                }
            }
        }
        if (res.size() == 0) res.add(Integer.valueOf(input));
        return res;
    }
	public static void main(String args[])
	{
		Scanner scan=new Scanner(System.in);
		String s=scan.next();
		System.out.println(diffWaysToCompute(s));
	}
 }