/*
 * 
 Search a Word in a 2D Grid of characters
Given a 2D grid of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is said be found in a direction if all characters match in this direction (not in zig-zag form).

The 8 directions are, Horizontally Left, Horizontally Right, Vertically Up and 4 Diagonal directions.

Input:4
4
T E X T
T E T T
E X I T
T E L L
LIE

Output: 3 3
        
        
        

 */

package Elite2020;
import java.io.*; 
import java.util.*; 
public class SearchWordInGrid {
	
	// Java program to search a word in a 2D grid 

	
	  
	    // Rows and columns in given grid 
	    static int R, C; 
	  
	    // For searching in all 8 direction  
	    static int[] x = { -1, -1, -1, 0, 0, 1, 1, 1 };  
	    static int[] y = { -1, 0, 1, -1, 1, -1, 0, 1 };  
	  
	    // This function searches in all 8-direction from point  
	    // (row, col) in grid[][]  
	    static boolean search2D(char[][] grid, int row, 
	                            int col, String word) 
	    { 
	            // If first character of word doesn't match with  
	            // given starting point in grid.  
	            if (grid[row][col] != word.charAt(0)) 
	                return false; 
	  
	            int len = word.length(); 
	              
	            // Search word in all 8 directions 
	            // starting from (row,col) 
	            for (int dir = 0; dir < 8; dir++) 
	            { 
	                // Initialize starting point 
	                // for current direction  
	                int k, rd = row + x[dir], cd = col + y[dir]; 
	  
	                // First character is already checked,  
	                //  match remaining characters 
	                for (k = 1; k < len; k++) 
	                { 
	                    // If out of bound break  
	                    if (rd >= R || rd < 0 || cd >= C || cd < 0) 
	                        break; 
	  
	                    // If not matched, break  
	                    if (grid[rd][cd] != word.charAt(k)) 
	                        break; 
	  
	                    // Moving in particular direction  
	                    rd += x[dir]; 
	                    cd += y[dir]; 
	                }  
	  
	                // If all character matched, then value of must  
	                // be equal to length of word 
	                if (k == len) 
	                    return true;  
	            } 
	        return false; 
	    } 
	  
	    // Searches given word in a given 
	    // matrix in all 8 directions 
	    static void patternSearch(char[][] grid, String word) 
	    { 
	            // Consider every point as starting  
	            // point and search given word  
	            for (int row = 0; row < R; row++)  
	            { 
	                for (int col = 0; col < C; col++)  
	                { 
	                    if (search2D(grid, row, col, word)) 
	                        System.out.println(row+" "+col); 
	                } 
	            } 
	    } 
	  
	    public static void main(String args[] ) {
			 Scanner scan = new Scanner(System.in);
				 R=scan.nextInt();
				 C=scan.nextInt();      
				
				char[][] field=new char[R][C];
			       for(int i=0; i<R; i++)
			       {
			           for(int j=0; j<C; j++)
			           {
			        	   field[i][j] = scan.next().charAt(0);
			           }
			       }
			       String word=scan.next();
			       patternSearch(field,word);
		}
	  

}
