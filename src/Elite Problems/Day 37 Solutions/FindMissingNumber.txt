/*
 * 
 You are given a list of n-1 integers and these integers are in the range of 1 to n. There are no duplicates in the list. One of the integers is missing in the list. Write an efficient code to find the missing integer.

Example :

Input:1 2 4 6 3 7 8
Output: 5

Time Complexity :O(n)



==================================
Approach # 1

1. Get the sum of numbers which is total = n*(n+1)/2
2. Subtract all the numbers from sum and
   you will get the missing number


Approach # 2

1) XOR all the array elements, let the result of XOR be X1.
  2) XOR all numbers from 1 to n, let XOR be X2.
  3) XOR of X1 and X2 gives the missing number.
  
  
 */

package Elite2020;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class FindMissingNumber {
	
	
	//Approach # 1
	/*static int getMissingNo(int a[], int n) 
    { 
        int i, total; 
        total = (n + 1) * (n + 2) / 2; 
        for (i = 0; i < n; i++) 
            total -= a[i]; 
        return total; 
    } */
	
	
	//Approach # 2
	
	static int getMissingNo(int a[], int n) 
    { 
        int x1 = a[0]; 
        int x2 = 1; 
  
        /* For xor of all the elements  
           in array */
        for (int i = 1; i < n; i++) 
            x1 = x1 ^ a[i]; 
  
        /* For xor of all the elements  
           from 1 to n+1 */
        for (int i = 2; i <= n + 1; i++) 
            x2 = x2 ^ i; 
  
        return (x1 ^ x2); 
    } 
    
    
	
    
  
    public static void main(String args[]) throws IOException
    { 
    	 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 		String str = br.readLine();
 		
 		String[] numline = str.split(" ");
 		int[] a = Arrays.asList(numline).stream().mapToInt(Integer::parseInt).toArray();
     
        int miss = getMissingNo(a, a.length); 
        System.out.println(miss); 
    } 
    

}
